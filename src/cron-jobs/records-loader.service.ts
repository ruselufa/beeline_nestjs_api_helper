import { Injectable, OnApplicationBootstrap } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { AbonentRecord } from '../entities/beeline/abonent.record.entity';
import { Abonent } from '../entities/beeline/abonent.entity';
import { BeelineApiCallService } from '../beeline_api_call/beeline_api_call.service';
import { Cron } from '@nestjs/schedule';
import { Worker } from 'worker_threads';
import * as path from 'path';
import { BaseCronService } from './base-cron.service';
import { Logger } from '@nestjs/common';

function chunks<T>(array: T[], size: number): T[][] {
  const result: T[][] = [];
  for (let i = 0; i < array.length; i += size) {
    result.push(array.slice(i, i + size));
  }
  return result;
}

@Injectable()
export class RecordsLoaderService extends BaseCronService implements OnApplicationBootstrap {
  protected readonly logger = new Logger(RecordsLoaderService.name);
  public isProcessing = false;
  public lastStartTime: Date | null = null;
  private worker: Worker | null = null;

  constructor(
    private readonly beelineApiCallService: BeelineApiCallService,
    @InjectRepository(Abonent)
    private readonly abonentRepository: Repository<Abonent>,
    @InjectRepository(AbonentRecord)
    private readonly abonentRecordRepository: Repository<AbonentRecord>,
  ) {
    super();
  }

  async onApplicationBootstrap() {
    this.logger.log('RecordsLoaderService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∑–∞–ø–∏—Å–µ–π —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    setTimeout(async () => {
      this.logger.log('–ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π (—á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞)...');
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–ï–†–ï–î –≤—ã–∑–æ–≤–æ–º
      this.isProcessing = false;
      this.lastStartTime = null;
      await this.loadAllUsersRecords();
    }, 1000); // 60000 –º—Å = 1 –º–∏–Ω—É—Ç–∞
  }

  // –î–µ–ª–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–∞–∂–¥—ã–π 15 –º–∏–Ω—É—Ç
  @Cron('*/15 * * * *')
  async loadAllUsersRecords() {
    if (this.isProcessing) {
      const runningTime = Date.now() - this.lastStartTime.getTime();
      this.logger.warn(`–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è ${Math.floor(runningTime / 1000)} —Å–µ–∫—É–Ω–¥, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫`);
      return;
    }

    this.isProcessing = true;
    this.lastStartTime = new Date();
    
    try {
      this.logger.log('–ó–∞–ø—É—Å–∫ cron-–∑–∞–¥–∞—á–∏: –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–º–µ—Å—Ç–æ worker
      const results = await this.loadAllAbonentsRecords();
      this.logger.log(`–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: ${results.success}, –û—à–∏–±–æ–∫: ${results.errors}`);
    } catch (error) {
      this.logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π:', error);
    } finally {
      this.isProcessing = false;
      this.lastStartTime = null;
    }
  }

  async loadRecordsWithWorker() {
    return new Promise((resolve, reject) => {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ worker —Ñ–∞–π–ª—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
      const isDev = process.env.NODE_ENV === 'development' || !process.env.NODE_ENV;
      const workerPath = isDev 
        ? path.join(process.cwd(), 'src', 'cron-jobs', 'records-worker.js')
        : path.join(__dirname, 'records-worker.js');

      // –°–æ–∑–¥–∞–µ–º worker –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π
      this.worker = new Worker(workerPath, {
        workerData: {
          // –ü–µ—Ä–µ–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ worker
        }
      });

      this.worker.on('message', (message) => {
        this.logger.log('Worker —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
        if (message.type === 'progress') {
          this.logger.log(`–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π: ${message.data}`);
        } else if (message.type === 'complete') {
          this.logger.log('–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ worker');
          this.worker?.terminate();
          this.worker = null;
          resolve(message.data);
        }
      });

      this.worker.on('error', (error) => {
        this.logger.error('–û—à–∏–±–∫–∞ –≤ worker:', error);
        this.worker?.terminate();
        this.worker = null;
        reject(error);
      });

      this.worker.on('exit', (code) => {
        if (code !== 0) {
          this.logger.error(`Worker –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`);
          reject(new Error(`Worker –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`));
        }
      });

      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ worker
      this.worker.postMessage({ type: 'start' });
    });
  }

  private async loadAllAbonentsRecords() {
    try {
      const abonents = await this.abonentRepository.find();
      this.logger.log(`–ù–∞–π–¥–µ–Ω–æ ${abonents.length} –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π`);

      if (abonents.length === 0) {
        this.logger.log('–ù–µ—Ç –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
        return { success: 0, errors: 0, total: 0 };
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
      return await this.processBatchWithErrorHandling(
        abonents,
        async (abonent) => {
          await this.loadAndSaveRecordsForUserFromLastRecord(abonent.userId);
        },
        5, // —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞
        '–∞–±–æ–Ω–µ–Ω—Ç'
      );
      
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤:', error);
      throw error;
    }
  }

  async loadAllUsersRecordsFromLastRecord() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–±–æ–Ω–µ–Ω—Ç–æ–≤
      const abonents = await this.abonentRepository.find();
      this.logger.log(`–ù–∞–π–¥–µ–Ω–æ ${abonents.length} –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π`);

      if (abonents.length === 0) {
        this.logger.log('–ù–µ—Ç –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
        return { success: 0, errors: 0, total: 0 };
      }

      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–±–æ–Ω–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π
      return await this.processWithErrorHandling(
        abonents,
        async (abonent) => {
          await this.loadAndSaveRecordsForUserFromLastRecord(abonent.userId);
        },
        '–∞–±–æ–Ω–µ–Ω—Ç'
      );
      
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      throw error;
    }
  }

  async loadAndSaveRecordsForUser(userId: string, dateFrom?: string, dateTo?: string) {
    try {
      const records = await this.beelineApiCallService.getAllRecordsByUserId(userId, dateFrom, dateTo);
      const abonent = await this.abonentRepository.findOne({ where: { userId } });

      if (!abonent) {
        throw new Error(`–ê–±–æ–Ω–µ–Ω—Ç —Å userId ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      let savedCount = 0;
      let errorCount = 0;

      for (const record of records) {
        try {
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ beelineId
          const exists = await this.abonentRecordRepository.findOne({
            where: { beelineId: record.id },
          });
          
          if (exists) {
            this.logger.log(`–ó–∞–ø–∏—Å—å ${record.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
            continue;
          }

          const entity = this.abonentRecordRepository.create({
            beelineId: record.id,
            beelineExternalId: record.externalId,
            callId: record.callId || null,
            phone: record.phone,
            direction: record.direction,
            date: new Date(Number(record.date)), // –µ—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç timestamp
            duration: record.duration,
            fileSize: record.fileSize,
            comment: record.comment || '',
            abonent: abonent,
            createdAt: new Date(),
            updatedAt: new Date(),
          });
          
          await this.abonentRecordRepository.save(entity);
          savedCount++;
          this.logger.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∑–∞–ø–∏—Å—å: ${record.id}`);
          
        } catch (error) {
          errorCount++;
          this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏ ${record.id}: ${error.message}`);
          this.logErrorDetails(error, record);
          
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–ø–∏—Å—å—é
          continue;
        }
      }
      
      this.logger.log(`üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}. –£—Å–ø–µ—à–Ω–æ: ${savedCount}, –û—à–∏–±–æ–∫: ${errorCount}`);
      return { savedCount, errorCount, total: records.length };
      
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${error.message}`);
      throw error;
    }
  }

  private async getLastRecordDate(userId: string): Promise<string | undefined> {
    try {
      const lastRecord = await this.abonentRecordRepository.findOne({
        where: { abonent: { userId } },
        order: { date: 'DESC' },
      });

      return lastRecord 
        ? new Date(lastRecord.date.getTime() + 1000).toISOString()
        : undefined;
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è ${userId}: ${error.message}`);
      return undefined;
    }
  }

  async loadAndSaveRecordsForUserFromLastRecord(userId: string, dateTo?: string) {
    try {
      const dateFrom = await this.getLastRecordDate(userId);
      const records = await this.beelineApiCallService.getAllRecordsByUserIdFromLastRecord(
        userId,
        dateFrom,
        dateTo
      );
      
      const abonent = await this.abonentRepository.findOne({ where: { userId } });

      if (!abonent) {
        this.logger.warn(`–ê–±–æ–Ω–µ–Ω—Ç —Å userId ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return { savedCount: 0, errorCount: 0, total: 0 };
      }

      if (records.length === 0) {
        this.logger.log(`–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        return { savedCount: 0, errorCount: 0, total: 0 };
      }

      let savedCount = 0;
      let errorCount = 0;

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
      for (const record of records) {
        try {
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ beelineId
          const exists = await this.abonentRecordRepository.findOne({
            where: { beelineId: record.id },
          });
          
          if (exists) {
            this.logger.log(`–ó–∞–ø–∏—Å—å ${record.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
            continue;
          }

          const entity = this.abonentRecordRepository.create({
            beelineId: record.id,
            beelineExternalId: record.externalId,
            callId: record.callId || null,
            phone: record.phone,
            direction: record.direction,
            date: new Date(Number(record.date)),
            duration: record.duration,
            fileSize: record.fileSize,
            comment: record.comment || '',
            abonent: abonent,
            createdAt: new Date(),
            updatedAt: new Date(),
          });
          
          await this.abonentRecordRepository.save(entity);
          savedCount++;
          this.logger.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∑–∞–ø–∏—Å—å: ${record.id}`);
          
        } catch (error) {
          errorCount++;
          this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏ ${record.id}: ${error.message}`);
          this.logErrorDetails(error, record);
          
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–ø–∏—Å—å—é
          continue;
        }
      }
      
      this.logger.log(`üìä –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${savedCount} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π, –æ—à–∏–±–æ–∫: ${errorCount}`);
      return { savedCount, errorCount, total: records.length };
      
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${error.message}`);
      this.logErrorDetails(error, { userId });
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å
      return { savedCount: 0, errorCount: 1, total: 0 };
    }
  }
} 