import { Injectable, OnModuleDestroy, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { HttpService } from '@nestjs/axios';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { firstValueFrom } from 'rxjs';
import * as fs from 'fs/promises';
import * as path from 'path';
import { DeepseekResponse, DeepseekRequestOptions, DeepseekMessage } from './types';
import { getSalesPrompt, getQualityPrompt } from './prompts';
import { salesPromptV2 } from './prompts/sales.prompt_v2';
import { qualityPromptV2 } from './prompts/quality.prompt_v2';
import { AnalyzedAi } from '../entities/beeline/analyzed_ai.entity';
// import { ClientsService } from 'src/clients/clients.service';
import { AbonentRecord } from 'src/entities/beeline/abonent.record.entity';
import { Abonent } from 'src/entities/beeline/abonent.entity';
import { CreateAnalyzedAiDto } from '../entities/beeline/analyzed_ai.dto';

@Injectable()
export class AiDeepseekService implements OnModuleDestroy {
	private readonly apiKey: string;
	private readonly apiUrl: string = 'https://api.deepseek.com/v1/chat/completions';
	private readonly logger = new Logger(AiDeepseekService.name);

	constructor(
		private configService: ConfigService,
		private httpService: HttpService,
		// private clientsService: ClientsService,
		@InjectRepository(AbonentRecord)
		private abonentRecordRepository: Repository<AbonentRecord>,
		@InjectRepository(Abonent)
		private abonentRepository: Repository<Abonent>,
		@InjectRepository(AnalyzedAi)
		private analyzedAiRepository: Repository<AnalyzedAi>
	) {
		this.apiKey = this.configService.get<string>('DEEPSEEK_API_KEY');
		if (!this.apiKey) {
			throw new Error('DEEPSEEK_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
		}

		this.httpService.axiosRef.defaults.headers.common['Authorization'] = `Bearer ${this.apiKey}`;
		this.httpService.axiosRef.defaults.headers.common['Content-Type'] = 'application/json';
		this.httpService.axiosRef.defaults.timeout = 300000; // –£–º–µ–Ω—å—à–∞–µ–º –¥–æ 5 –º–∏–Ω—É—Ç
		this.httpService.axiosRef.defaults.maxRedirects = 5;
		this.httpService.axiosRef.defaults.validateStatus = (status) => status < 500; // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å—ã < 500
	}

	private getPromptByDepartment(department: string): string {
		return department.toLowerCase().includes('–û—Ç–¥–µ–ª –ö–∞—á–µ—Å—Ç–≤–∞') || department.toLowerCase().includes('–û—Ç–¥–µ–ª –ü—Ä–æ–¥—É–∫—Ç–∞')
			? qualityPromptV2
			: salesPromptV2;
	}

	// –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –æ—à–∏–±–∫–∏ –¥–ª—è –Ω–µ–ø–æ–ª–Ω—ã—Ö JSON –æ—Ç–≤–µ—Ç–æ–≤
	private isIncompleteJsonError(error: any, jsonString: string): boolean {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ–ø–æ–ª–Ω–æ–≥–æ JSON
		const errorMessage = error.message.toLowerCase();
		const jsonLower = jsonString.toLowerCase();
		
		// –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
		const jsonParseErrors = [
			'unexpected end of json input',
			'unexpected token',
			'unterminated string',
			'expected \',\' or \'}\' after property value',
			'expected \',\' or \']\' after array element',
			'unexpected number',
			'unexpected string',
			'unexpected boolean',
			'unexpected null',
			'unexpected end of data',
			'bad escaped character',
			'bad control character',
			'bad unicode escape',
			'duplicate key',
			'number too big',
			'number too small'
		];
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
		const hasJsonParseError = jsonParseErrors.some(err => errorMessage.includes(err));
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—É—é —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å JSON
		const hasStructuralIssues = (
			(jsonLower.includes('"table"') && !jsonLower.includes('"scoring"')) ||
			(jsonLower.includes('"blocks"') && !jsonLower.includes(']')) ||
			(jsonLower.includes('"headers"') && !jsonLower.includes(']'))
		);
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –∫–∞–≤—ã—á–∫–∏ –∏–ª–∏ —Å–∫–æ–±–∫–∏
		const hasUnclosedElements = (
			(jsonString.split('"').length % 2 !== 1) || // –ù–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–≤—ã—á–µ–∫
			(jsonString.split('{').length !== jsonString.split('}').length) || // –ù–µ—Ä–∞–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–æ–±–æ–∫
			(jsonString.split('[').length !== jsonString.split(']').length) // –ù–µ—Ä–∞–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ–∫
		);
		
		return hasJsonParseError || hasStructuralIssues || hasUnclosedElements;
	}

	async analyzeConversation(text: string, clientPhone: string, abonentDepartment: string, recordId?: number): Promise<any> {
		try {
			this.logger.log(`–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞`);

			const systemPrompt = this.getPromptByDepartment(abonentDepartment);

			const requestOptions: DeepseekRequestOptions = {
				model: 'deepseek-reasoner',
				messages: [
					{ role: 'system', content: systemPrompt },
					{ role: 'user', content: text }
				],
				temperature: 0.7,
				max_tokens: 16000
			};

			// –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
			const requestSize = JSON.stringify(requestOptions).length;
			this.logger.log(`–†–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: ${requestSize} –±–∞–π—Ç`);
			
			if (requestSize > 50000) {
				this.logger.warn(`–ë–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: ${requestSize} –±–∞–π—Ç. –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å API`);
			}

			const response = await firstValueFrom(
				this.httpService.post<DeepseekResponse>(
					this.apiUrl,
					requestOptions
				)
			);

			const analysisResult = response.data.choices[0].message.content;
			// this.logger.log('–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: ', response.data.choices[0].message);

			// –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω–µ–ø–æ–ª–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
			let parsedResult;
			let jsonString = '';
			
			try {
				// –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ markdown –±–ª–æ–∫–∞
				const jsonMatch = analysisResult.match(/```json\n([\s\S]*?)(?=\n```|$)/);
				if (jsonMatch && jsonMatch[1]) {
					jsonString = jsonMatch[1].trim();
					// this.logger.log('–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π JSON:');
					// this.logger.log(jsonString);
					parsedResult = JSON.parse(jsonString);
				} else {
					// –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ markdown –±–ª–æ–∫, –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç
					jsonString = analysisResult.trim();
					parsedResult = JSON.parse(jsonString);
				}

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
				if (!parsedResult.table || !parsedResult.table.blocks) {
					throw new Error('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç table.blocks');
				}

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–ª–æ–∫–æ–≤
				const requiredBlocks = ['–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–≤–æ–Ω–∫–µ', '–û—Ü–µ–Ω–∫–∞ —ç—Ç–∞–ø–æ–≤ –∑–≤–æ–Ω–∫–∞', '–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'];
				const blocks = parsedResult.table.blocks.map(block => block.blockName);
				const missingBlocks = requiredBlocks.filter(block => !blocks.includes(block));
				
				if (missingBlocks.length > 0) {
					throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏: ${missingBlocks.join(', ')}`);
				}

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π –≤ –∫–∞–∂–¥–æ–º –±–ª–æ–∫–µ
				parsedResult.table.blocks.forEach(block => {
					if (!block.headers || !Array.isArray(block.headers)) {
						throw new Error(`–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–ª–æ–∫–∞ ${block.blockName}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Å—Å–∏–≤ headers`);
					}

					block.headers.forEach(header => {
						if (!header.id || !header.label || !header.type) {
							throw new Error(`–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤ –±–ª–æ–∫–µ ${block.blockName}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è`);
						}
					});
				});

			} catch (parseError) {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π –Ω–µ–ø–æ–ª–Ω–æ–≥–æ JSON
				if (this.isIncompleteJsonError(parseError, jsonString)) {
					this.logger.error(`‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–ø–æ–ª–Ω—ã–π/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek –¥–ª—è –∑–∞–ø–∏—Å–∏ ${recordId}`);
					this.logger.error(`üîç –¢–∏–ø –æ—à–∏–±–∫–∏: ${parseError.message}`);
					this.logger.error(`üìè –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: ${analysisResult.length} —Å–∏–º–≤–æ–ª–æ–≤`);
					this.logger.error(`üìè –†–∞–∑–º–µ—Ä JSON: ${jsonString.length} —Å–∏–º–≤–æ–ª–æ–≤`);
					this.logger.error(`üìç –ü–æ–∑–∏—Ü–∏—è –æ—à–∏–±–∫–∏: ${parseError.message.match(/position (\d+)/)?.[1] || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
					
					// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ –æ—à–∏–±–∫–∏
					const position = parseInt(parseError.message.match(/position (\d+)/)?.[1] || '0');
					if (position > 0) {
						const start = Math.max(0, position - 100);
						const end = Math.min(jsonString.length, position + 100);
						this.logger.error(`üîç –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ (–ø–æ–∑–∏—Ü–∏—è ${position}):`);
						this.logger.error(`   ...${jsonString.slice(start, position)}[–û–®–ò–ë–ö–ê]${jsonString.slice(position, end)}...`);
					}
					
					// –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –¥–ª—è –Ω–µ–ø–æ–ª–Ω–æ–≥–æ JSON
					const incompleteError = new Error(`–ù–µ–ø–æ–ª–Ω—ã–π/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek: ${parseError.message}`);
					incompleteError.name = 'IncompleteJsonError';
					(incompleteError as any).isIncompleteJson = true;
					(incompleteError as any).originalError = parseError;
					(incompleteError as any).jsonString = jsonString;
					(incompleteError as any).errorPosition = position;
					
					throw incompleteError;
				}
				
				this.logger.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç: ${parseError.message}`);
				// this.logger.error('–ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç:');
				// this.logger.error(analysisResult);
				throw parseError;
			}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
			const createAnalyzedAiDto: CreateAnalyzedAiDto = {
				conversationId: `conv_${recordId || Date.now().toString()}`,
				department: abonentDepartment,
				originalText: text,
				analysisResult: parsedResult,
				clientPhone: clientPhone,
			}

			await this.analyzedAiRepository.save(createAnalyzedAiDto);

			this.logger.log('‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');

			return parsedResult;

		} catch (error) {
			this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: ${error.message}`);
			
			// –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –Ω–µ–ø–æ–ª–Ω—ã—Ö JSON
			if ((error as any).isIncompleteJson) {
				this.logger.error(`üîç –î–µ—Ç–∞–ª–∏ –Ω–µ–ø–æ–ª–Ω–æ–≥–æ/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ JSON:`);
				this.logger.error(`   - –¢–∏–ø –æ—à–∏–±–∫–∏: ${error.name}`);
				this.logger.error(`   - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: ${(error as any).originalError?.message}`);
				this.logger.error(`   - –†–∞–∑–º–µ—Ä JSON: ${(error as any).jsonString?.length || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} —Å–∏–º–≤–æ–ª–æ–≤`);
				if ((error as any).errorPosition) {
					this.logger.error(`   - –ü–æ–∑–∏—Ü–∏—è –æ—à–∏–±–∫–∏: ${(error as any).errorPosition}`);
				}
				
				// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
				const jsonStr = (error as any).jsonString || '';
				if (jsonStr) {
					const openBraces = (jsonStr.match(/\{/g) || []).length;
					const closeBraces = (jsonStr.match(/\}/g) || []).length;
					const openBrackets = (jsonStr.match(/\[/g) || []).length;
					const closeBrackets = (jsonStr.match(/\]/g) || []).length;
					const quotes = (jsonStr.match(/"/g) || []).length;
					
					this.logger.error(`   - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:`);
					this.logger.error(`     –°–∫–æ–±–∫–∏: {${openBraces}} }${closeBraces} [${openBrackets}] ]${closeBrackets}`);
					this.logger.error(`     –ö–∞–≤—ã—á–∫–∏: ${quotes} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ)`);
				}
			}
			
			throw error;
		}
	}

	async analyzeConversationFile(filePath: string, clientPhone: string, recordId): Promise<any> {
		try {
			const fileContent = await fs.readFile(filePath, 'utf-8');
			const record = await this.abonentRecordRepository.findOne({ 
				where: { beelineId: recordId },
				relations: ['abonent']
			});
			
			if (!record) {
				this.logger.error(`–ó–∞–ø–∏—Å—å —Å beelineId ${recordId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
				throw new Error(`Record not found: ${recordId}`);
			}
			
			if (!record.abonent) {
				this.logger.error(`–°–≤—è–∑–∞–Ω–Ω—ã–π –∞–±–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏ ${recordId}`);
				throw new Error(`Abonent not found for record: ${recordId}`);
			}
			return await this.analyzeConversation(fileContent, clientPhone, record.abonent.department, record.id);
		} catch (error) {
			this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${filePath}: ${error.message}`);
			throw error;
		}
	}

	async analyzeConversationFiles(directory: string): Promise<void> {
		try {
			const files = await fs.readdir(directory);
			const txtFiles = files.filter(file => file.endsWith('.txt'));

			this.logger.log(`–ù–∞–π–¥–µ–Ω–æ ${txtFiles.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`);

			for (const file of txtFiles) {
				const filePath = path.join(directory, file);

				// –ò–∑–≤–ª–µ–∫–∞–µ–º clientPhone –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç: client_123.txt)
				const clientPhone = file.split('_')[1].split('.')[0];
				const recordId = file.split('_')[0];

				try {
					await this.analyzeConversationFile(filePath, clientPhone, recordId);
					this.logger.log(`‚úì –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: ${file}`);
				} catch (error) {
					this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞ ${file}: ${error.message}`);
					continue;
				}
			}

			this.logger.log('‚úì –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω');
		} catch (error) {
			this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${error.message}`);
			throw error;
		}
	}

	async onModuleDestroy() {
		this.logger.log('–°–µ—Ä–≤–∏—Å AiDeepseek –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É');
	}
} 