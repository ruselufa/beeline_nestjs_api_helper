import { Injectable } from '@nestjs/common';
import { Command, Ctx, Start, Update, Hears } from 'nestjs-telegraf';
import { BeelineApiCallService } from 'src/beeline_api_call/beeline_api_call.service';
import { Context } from 'telegraf';

@Update()
@Injectable()
export class TelegramBotService {
	constructor(private readonly beelineApiCallService: BeelineApiCallService) {}
	@Start()
	async onStart(@Ctx() ctx: Context) {
		await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
	}

	@Command('ping')
	async onPing(@Ctx() ctx: Context) {
		await ctx.reply('Pong!');
	}

	@Hears('–ø—Ä–∏–≤–µ—Ç')
	async onHello(@Ctx() ctx: Context) {
		await ctx.reply('–ü—Ä–∏–≤–µ—Ç, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?');
	}

	@Command('abonents')
	async onGetAbonents(@Ctx() ctx: Context) {
		try {
			const abonents = await this.beelineApiCallService.getAllAbonents();
			const formattedAbonent = abonents[0];
			await ctx.reply(
				`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤: ${abonents.length},
–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤: ${abonents.map((abonent) => abonent.department).filter((department, index, self) => self.indexOf(department) === index).length}
–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã: ${abonents
					.map((abonent) => abonent.department)
					.filter((department, index, self) => self.indexOf(department) === index)
					.join('; ')}
ID: ${formattedAbonent.userId},
Phone: ${formattedAbonent.phone},
FirstName: ${formattedAbonent.firstName},
LastName: ${formattedAbonent.lastName ? formattedAbonent.lastName : 'N/A'},
Department: ${formattedAbonent.department},
Extension: ${formattedAbonent.extension}`,
			);

			// const formattedAbonents = abonents.map(
			// 	(abonent) =>
			// 		`ID: ${abonent.userId}, Phone: ${abonent.phone}, Name: ${abonent.firstName} ${abonent.lastName}, Department: ${abonent.department}, Extension: ${abonent.extension}`,
			// );
			// await ctx.reply(formattedAbonents.join('\n'));
		} catch (error: unknown) {
			if (error instanceof Error) {
				await ctx.reply(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤: ${error.message}`);
			} else {
				await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤');
			}
		}
	}

	@Command('record')
	async onGetRecord(@Ctx() ctx: Context) {
		try {
			const recordId = '70592786'; // –ú–æ–∂–Ω–æ –ø–æ–∑–∂–µ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è

			// 1. –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
			const details = await this.beelineApiCallService.getRecordInfo(recordId);
			// rawDate 1730955939531
			const formattedDate = new Date(details.date).toLocaleString('ru-RU', {
				year: 'numeric',
				month: '2-digit',
				day: '2-digit',
				hour: '2-digit',
				minute: '2-digit',
				second: '2-digit',
			});
			const formattedFileSize = Number((details.fileSize / 1024 / 1024).toFixed(2)); // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –ö–ë
			details.fileSize = formattedFileSize; // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
			details.date = formattedDate; // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É
			// Duration: 20 –º–∏–Ω 30 —Å–µ–∫
			const durationInSeconds = Math.round(details.duration / 1000); // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–µ–∫—É–Ω–¥—ã
			const minutes = Math.floor(durationInSeconds / 60); // –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω—É—Ç—ã
			const seconds = durationInSeconds % 60; // –ü–æ–ª—É—á–∞–µ–º —Å–µ–∫—É–Ω–¥—ã
			const formattedDuration = `${minutes} –º–∏–Ω ${seconds} —Å–µ–∫`; // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
			// 2. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
			const msg = `üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏:
üÜî ID: ${details.id}
üìû –ù–æ–º–µ—Ä: ${details.phone}
üë§ –ê–±–æ–Ω–µ–Ω—Ç: ${details.abonent.firstName} ${details.abonent.lastName ? details.abonent.lastName : ''}
üìÖ –î–∞—Ç–∞: ${details.date}
‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${formattedDuration}
üíæ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${details.fileSize} –ú–±–∞–π—Ç
üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${details.comment || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`;

			await ctx.reply(msg); // <-- –Ω–µ –∑–∞–±—É–¥—å!

			// 3. –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
			const mp3Buffer = await this.beelineApiCallService.getRecordFile(recordId);

			// 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º mp3 –≤ Telegram
			await ctx.replyWithAudio(
				{ source: mp3Buffer, filename: 'call_recording.mp3' },
				{ caption: '–í–æ—Ç –≤–∞—à–∞ –∑–∞–ø–∏—Å—å üìû' },
			);
		} catch (error: unknown) {
			if (error instanceof Error) {
				await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: ' + error.message);
			} else {
				await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∑–∞–ø–∏—Å–∏');
			}
		}
	}
}
