import { Logger } from '@nestjs/common';

export abstract class BaseCronService {
  protected abstract readonly logger: Logger;
  
  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
   * –ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö, –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—è –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å
   */
  protected async processWithErrorHandling<T>(
    items: T[],
    processor: (item: T) => Promise<void>,
    itemName: string = '—ç–ª–µ–º–µ–Ω—Ç'
  ): Promise<{ success: number; errors: number; total: number }> {
    let successCount = 0;
    let errorCount = 0;
    const total = items.length;
    
    this.logger.log(`–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É ${total} ${itemName}–æ–≤`);
    
    for (const item of items) {
      try {
        await processor(item);
        successCount++;
        this.logger.log(`‚úÖ ${itemName} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω`);
      } catch (error) {
        errorCount++;
        this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${itemName}: ${error.message}`);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
        this.logErrorDetails(error, item);
        
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
        continue;
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    this.logger.log(`üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: ${successCount}, –û—à–∏–±–æ–∫: ${errorCount}, –í—Å–µ–≥–æ: ${total}`);
    
    return { success: successCount, errors: errorCount, total };
  }
  
  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞–∫–µ—Ç–∞–º–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
   */
  protected async processBatchWithErrorHandling<T>(
    items: T[],
    processor: (item: T) => Promise<void>,
    batchSize: number = 5,
    itemName: string = '—ç–ª–µ–º–µ–Ω—Ç'
  ): Promise<{ success: number; errors: number; total: number }> {
    let successCount = 0;
    let errorCount = 0;
    const total = items.length;
    
    this.logger.log(`–ù–∞—á–∏–Ω–∞–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É ${total} ${itemName}–æ–≤ (—Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: ${batchSize})`);
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–∞–∫–µ—Ç—ã
    for (let i = 0; i < items.length; i += batchSize) {
      const batch = items.slice(i, i + batchSize);
      this.logger.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç ${Math.floor(i / batchSize) + 1}/${Math.ceil(items.length / batchSize)}`);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const batchResults = await Promise.allSettled(
        batch.map(async (item) => {
          try {
            await processor(item);
            return { success: true };
          } catch (error) {
            this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${itemName}: ${error.message}`);
            this.logErrorDetails(error, item);
            return { success: false, error };
          }
        })
      );
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–∞
      batchResults.forEach(result => {
        if (result.status === 'fulfilled') {
          if (result.value.success) {
            successCount++;
          } else {
            errorCount++;
          }
        } else {
          errorCount++;
        }
      });
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
      if (i + batchSize < items.length) {
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
    
    this.logger.log(`üéØ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: ${successCount}, –û—à–∏–±–æ–∫: ${errorCount}, –í—Å–µ–≥–æ: ${total}`);
    
    return { success: successCount, errors: errorCount, total };
  }
  
  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ç–∏–ø–∞
   */
  protected logErrorDetails(error: any, item: any) {
    const errorMessage = error.message?.toLowerCase() || '';
    
    if (errorMessage.includes('enoent') || errorMessage.includes('file not found')) {
      this.logger.error(' –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    } else if (errorMessage.includes('econnreset') || errorMessage.includes('connection reset')) {
      this.logger.error('üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ');
    } else if (errorMessage.includes('timeout') || errorMessage.includes('timed out')) {
      this.logger.error('‚è∞ –¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏');
    } else if (errorMessage.includes('permission') || errorMessage.includes('access denied')) {
      this.logger.error('üîí –û—à–∏–±–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
    } else if (errorMessage.includes('network') || errorMessage.includes('connection')) {
      this.logger.error('üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é');
    } else if (errorMessage.includes('download') || errorMessage.includes('upload')) {
      this.logger.error('üì• –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ —Ñ–∞–π–ª–∞');
    } else if (errorMessage.includes('database') || errorMessage.includes('sql')) {
      this.logger.error('üóÑÔ∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    } else {
      this.logger.error(`üîç –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏: ${error.name || 'Unknown'}`);
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
    if (error.code) {
      this.logger.error(`üìã –ö–æ–¥ –æ—à–∏–±–∫–∏: ${error.code}`);
    }
    if (error.status) {
      this.logger.error(`üìä HTTP —Å—Ç–∞—Ç—É—Å: ${error.status}`);
    }
    if (error.cause) {
      this.logger.error(`üîó –ü—Ä–∏—á–∏–Ω–∞: ${error.cause.message || error.cause}`);
    }
  }
  
  /**
   * –ü–æ–≤—Ç–æ—Ä—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
   */
  protected async retryOperation<T>(
    operation: () => Promise<T>,
    maxRetries: number = 3,
    baseDelay: number = 1000
  ): Promise<T> {
    let lastError: Error;
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        return await operation();
      } catch (error) {
        lastError = error;
        this.logger.warn(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} –Ω–µ —É–¥–∞–ª–∞—Å—å: ${error.message}`);
        
        if (attempt < maxRetries) {
          const delay = baseDelay * Math.pow(2, attempt - 1); // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
          this.logger.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delay}–º—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
          await new Promise(resolve => setTimeout(resolve, delay));
        }
      }
    }
    
    throw lastError;
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
   */
  protected async safeFileExists(filePath: string): Promise<boolean> {
    try {
      const fs = await import('fs/promises');
      await fs.access(filePath);
      return true;
    } catch {
      return false;
    }
  }
  
  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
   */
  protected async safeDeleteFile(filePath: string): Promise<boolean> {
    try {
      const fs = await import('fs/promises');
      await fs.unlink(filePath);
      this.logger.log(`üóëÔ∏è –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω: ${filePath}`);
      return true;
    } catch (error) {
      this.logger.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª ${filePath}: ${error.message}`);
      return false;
    }
  }
  
  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
   */
  protected formatTime(ms: number): string {
    const seconds = Math.floor(ms / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    
    if (hours > 0) {
      return `${hours}—á ${minutes % 60}–º ${seconds % 60}—Å`;
    } else if (minutes > 0) {
      return `${minutes}–º ${seconds % 60}—Å`;
    } else {
      return `${seconds}—Å`;
    }
  }
  
  /**
   * –í—ã–≤–æ–¥–∏—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  protected logProgress(current: number, total: number, startTime: number, itemName: string = '—ç–ª–µ–º–µ–Ω—Ç–æ–≤') {
    const percentage = Math.round((current / total) * 100);
    const elapsed = Date.now() - startTime;
    const elapsedFormatted = this.formatTime(elapsed);
    
    this.logger.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${current}/${total} ${itemName} (${percentage}%) - –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: ${elapsedFormatted}`);
  }
} 