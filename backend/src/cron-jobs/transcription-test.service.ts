import { Injectable, OnApplicationBootstrap } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { TranscriptionService } from '../transcription/transcription.service';
import { BeelineApiCallService } from '../beeline_api_call/beeline_api_call.service';
import { AbonentRecord } from '../entities/beeline/abonent.record.entity';
import * as path from 'path';
import * as fs from 'fs';
import { MoreThan, Repository as TypeOrmRepository } from 'typeorm';
import { Cron } from '@nestjs/schedule';
import { Worker } from 'worker_threads';
import { BaseCronService } from './base-cron.service';
import { Logger } from '@nestjs/common';

@Injectable()
export class TranscriptionTestService extends BaseCronService implements OnApplicationBootstrap {
  protected readonly logger = new Logger(TranscriptionTestService.name);
  public isProcessing = false;
  public lastStartTime: Date | null = null;
  private worker: Worker | null = null;

  constructor(
    private readonly transcriptionService: TranscriptionService,
    private readonly beelineApiCallService: BeelineApiCallService,
    @InjectRepository(AbonentRecord)
    private readonly abonentRecordRepository: TypeOrmRepository<AbonentRecord>,
  ) {
    super();
  }

  async onApplicationBootstrap() {
    this.logger.log('TranscriptionTestService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã.');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    setTimeout(async () => {
      this.logger.log('–ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–∏—á–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ (—á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞)...');
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–ï–†–ï–î –≤—ã–∑–æ–≤–æ–º
      this.isProcessing = false;
      this.lastStartTime = null;
      await this.processTranscription();
    }, 30000); // 30000 –º—Å = 30 —Å–µ–∫—É–Ω–¥
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –∫–∞–∂–¥—ã–π —á–∞—Å
  @Cron('0 * * * *')
  async processTranscription() {
    if (this.isProcessing) {
      const runningTime = Date.now() - this.lastStartTime.getTime();
      this.logger.warn(`–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è ${Math.floor(runningTime / 1000)} —Å–µ–∫—É–Ω–¥, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫`);
      return;
    }

    this.isProcessing = true;
    this.lastStartTime = new Date();
    
    try {
      this.logger.log('–ó–∞–ø—É—Å–∫ cron-–∑–∞–¥–∞—á–∏: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏');
      // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–º–µ—Å—Ç–æ worker
      const results = await this.processFreshRecordsForTranscription();
      this.logger.log(`–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: ${results.success}, –û—à–∏–±–æ–∫: ${results.errors}`);
    } catch (error) {
      this.logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏:', error);
    } finally {
      this.isProcessing = false;
      this.lastStartTime = null;
    }
  }

  async processTranscriptionWithWorker() {
    return new Promise((resolve, reject) => {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ worker —Ñ–∞–π–ª—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
      const isDev = process.env.NODE_ENV === 'development' || !process.env.NODE_ENV;
      const workerPath = isDev 
        ? path.join(process.cwd(), 'src', 'cron-jobs', 'transcription-worker.js')
        : path.join(__dirname, 'transcription-worker.js');

      // –°–æ–∑–¥–∞–µ–º worker –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
      this.worker = new Worker(workerPath, {
        workerData: {
          // –ü–µ—Ä–µ–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ worker
        }
      });

      this.worker.on('message', (message) => {
        this.logger.log('Worker —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
        if (message.type === 'progress') {
          this.logger.log(`–ü—Ä–æ–≥—Ä–µ—Å—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: ${message.data}`);
        } else if (message.type === 'complete') {
          this.logger.log('–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ worker');
          this.worker?.terminate();
          this.worker = null;
          resolve(message.data);
        }
      });

      this.worker.on('error', (error) => {
        this.logger.error('–û—à–∏–±–∫–∞ –≤ worker:', error);
        this.worker?.terminate();
        this.worker = null;
        reject(error);
      });

      this.worker.on('exit', (code) => {
        if (code !== 0) {
          this.logger.error(`Worker –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`);
          reject(new Error(`Worker –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`));
        }
      });

      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ worker
      this.worker.postMessage({ type: 'start' });
    });
  }

  async processFreshRecordsForTranscription() {
    const startTime = Date.now();
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª–∏–Ω–Ω—ã–µ)
      const totalRecords = await this.abonentRecordRepository.count({
        where: {
          beeline_download: false,
          transcribe_processed: false,
          to_short: false,
          duration: MoreThan(240000)
        }
      });

      if (totalRecords === 0) {
        this.logger.log('–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏');
        return { success: 0, errors: 0, total: 0 };
      }

      this.logger.log(`–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é > 4 –º–∏–Ω—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${totalRecords}`);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const records = await this.abonentRecordRepository.find({
        where: {
          beeline_download: false,
          transcribe_processed: false,
          to_short: false,
          duration: MoreThan(240000)
        },
        order: { date: 'DESC' }
      });

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
      return await this.processWithErrorHandling(
        records,
        async (record) => {
          await this.processRecord(record, startTime, totalRecords);
        },
        '–∑–∞–ø–∏—Å—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏'
      );

    } catch (error) {
      this.logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  private async processRecord(record: AbonentRecord, startTime: number, totalRecords: number): Promise<void> {
    try {
      this.logger.log(` –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø–∏—Å–∏ ${record.beelineId}...`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏
      if (record.duration < 240000) {
        record.to_short = true;
        await this.abonentRecordRepository.save(record);
        this.logger.log(`‚è±Ô∏è –ó–∞–ø–∏—Å—å ${record.beelineId} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∫–æ—Ä–æ—Ç–∫–∞—è`);
        return;
      }
      
      // 1. –°–∫–∞—á–∏–≤–∞–µ–º mp3
      await this.beelineApiCallService.saveRecordMp3ToImportFolder(record.beelineId, record.phone);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–∫–∞—á–∞–ª—Å—è
      const mp3Path = path.join(process.cwd(), 'import', 'mp3', `${record.beelineId}_client_${record.phone}.mp3`);
      if (!await this.safeFileExists(mp3Path)) {
        throw new Error(`–§–∞–π–ª –Ω–µ –±—ã–ª —Å–∫–∞—á–∞–Ω: ${mp3Path}`);
      }
      
      record.beeline_download = true;
      await this.abonentRecordRepository.save(record);
      this.logger.log(`üì• MP3 —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏ ${record.beelineId}`);
      
      // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é
      const transcription = await this.transcriptionService.transcribeAudio(mp3Path);
      this.logger.log(` –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ ${record.beelineId}`);
      
      // 2.5. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
      const status = await this.waitForTranscriptionCompletion(transcription.file_id, record.beelineId);
      
      if (status.status !== 'completed') {
        throw new Error(`–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ ${record.beelineId}. –°—Ç–∞—Ç—É—Å: ${status.status}`);
      }
      
      // 3. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const txt = await this.transcriptionService.downloadResult(transcription.file_id);
      this.logger.log(` –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏ ${record.beelineId}`);
      
      // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const exportDir = path.join(process.cwd(), 'export', 'txt');
      if (!fs.existsSync(exportDir)) fs.mkdirSync(exportDir, { recursive: true });
      const txtPath = path.join(exportDir, `${record.beelineId}_client_${record.phone}.txt`);
      fs.writeFileSync(txtPath, txt);
      
      // 5. –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
      record.transcribe_processed = true;
      await this.abonentRecordRepository.save(record);
      this.logger.log(`‚úÖ –ó–∞–ø–∏—Å—å ${record.beelineId} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω–∞—è`);
      
      // 6. –£–¥–∞–ª—è–µ–º mp3-—Ñ–∞–π–ª
      await this.safeDeleteFile(mp3Path);
      
      this.logger.log(`‚úÖ –ó–∞–ø–∏—Å—å ${record.beelineId} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞`);
      
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏ ${record.beelineId}: ${error.message}`);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
      this.logErrorDetails(error, record);
      
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      if (record.beeline_download) {
        record.beeline_download = false;
        await this.abonentRecordRepository.save(record);
        this.logger.log(`üîÑ –§–ª–∞–≥ beeline_download —Å–±—Ä–æ—à–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏ ${record.beelineId}`);
      }
      
      // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –±–∞–∑–æ–≤–æ–º –∫–ª–∞—Å—Å–µ
      throw error;
    }
  }

  private async waitForTranscriptionCompletion(fileId: string, recordId: string): Promise<any> {
    let attempts = 0;
    const maxAttempts = 30; // –º–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è
    
    do {
      await new Promise(resolve => setTimeout(resolve, 10000)); // –∂–¥–µ–º 10 —Å–µ–∫—É–Ω–¥
      const status = await this.transcriptionService.getStatus(fileId);
      attempts++;
      this.logger.log(`‚è≥ –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ ${recordId}: ${status.status} (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts})`);
      
      if (status.status === 'completed' || status.status === 'error') {
        return status;
      }
    } while (attempts < maxAttempts);
    
    return { status: 'timeout' };
  }
} 