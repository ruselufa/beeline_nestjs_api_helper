// –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–ø–æ–ª–Ω—ã—Ö JSON –æ—à–∏–±–æ–∫

function isIncompleteJsonError(error, jsonString) {
	const errorMessage = error.message.toLowerCase();
	const jsonLower = jsonString.toLowerCase();
	
	// –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
	const jsonParseErrors = [
		'unexpected end of json input',
		'unexpected token',
		'unterminated string',
		'expected \',\' or \'}\' after property value',
		'expected \',\' or \']\' after array element',
		'unexpected number',
		'unexpected string',
		'unexpected boolean',
		'unexpected null',
		'unexpected end of data',
		'bad escaped character',
		'bad control character',
		'bad unicode escape',
		'duplicate key',
		'number too big',
		'number too small'
	];
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
	const hasJsonParseError = jsonParseErrors.some(err => errorMessage.includes(err));
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—É—é —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å JSON
	const hasStructuralIssues = (
		(jsonLower.includes('"table"') && !jsonLower.includes('"scoring"')) ||
		(jsonLower.includes('"blocks"') && !jsonLower.includes(']')) ||
		(jsonLower.includes('"headers"') && !jsonLower.includes(']'))
	);
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –∫–∞–≤—ã—á–∫–∏ –∏–ª–∏ —Å–∫–æ–±–∫–∏
	const hasUnclosedElements = (
		(jsonString.split('"').length % 2 !== 1) || // –ù–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–≤—ã—á–µ–∫
		(jsonString.split('{').length !== jsonString.split('}').length) || // –ù–µ—Ä–∞–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–æ–±–æ–∫
		(jsonString.split('[').length !== jsonString.split(']').length) // –ù–µ—Ä–∞–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ–∫
	);
	
	return hasJsonParseError || hasStructuralIssues || hasUnclosedElements;
}

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
const testCases = [
	{
		name: "–û—à–∏–±–∫–∞ —Å –∫–∞–≤—ã—á–∫–∞–º–∏ –≤ —Å—Ç—Ä–æ–∫–µ",
		json: '{"value": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫—É —É—Ç–æ—á–Ω–µ–Ω–∏—è: \'–°–µ—Ä–≥–µ–π, –≤—ã —Å–∫–∞–∑–∞–ª–∏ "–Ω–µ –Ω–∞–¥–æ", —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å —Å–º—É—â–∞–µ—Ç?\'"}',
		expectedError: "Expected ',' or '}' after property value in JSON at position 7505"
	},
	{
		name: "–ù–µ–∑–∞–∫—Ä—ã—Ç–∞—è —Å–∫–æ–±–∫–∞",
		json: '{"table": {"blocks": [{"name": "test"}]}',
		expectedError: "Unexpected end of JSON input"
	},
	{
		name: "–ù–µ–∑–∞–∫—Ä—ã—Ç–∞—è –∫–∞–≤—ã—á–∫–∞",
		json: '{"value": "unclosed quote}',
		expectedError: "Unexpected end of JSON input"
	},
	{
		name: "–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON",
		json: '{"table": {"blocks": [{"name": "test"}]}, "scoring": {}}',
		expectedError: null
	}
];

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–ø–æ–ª–Ω—ã—Ö JSON –æ—à–∏–±–æ–∫\n');

testCases.forEach((testCase, index) => {
	console.log(`–¢–µ—Å—Ç ${index + 1}: ${testCase.name}`);
	console.log(`JSON: ${testCase.json.substring(0, 100)}...`);
	
	if (testCase.expectedError) {
		const mockError = new Error(testCase.expectedError);
		const isIncomplete = isIncompleteJsonError(mockError, testCase.json);
		console.log(`–û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: ${testCase.expectedError}`);
		console.log(`–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ –Ω–µ–ø–æ–ª–Ω–∞—è: ${isIncomplete ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
	} else {
		try {
			JSON.parse(testCase.json);
			console.log('‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON - –æ—à–∏–±–æ–∫ –Ω–µ—Ç');
		} catch (error) {
			const isIncomplete = isIncompleteJsonError(error, testCase.json);
			console.log(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
			console.log(`–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ –Ω–µ–ø–æ–ª–Ω–∞—è: ${isIncomplete ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
		}
	}
	console.log('---\n');
}); 